{"_id":"level-manifest","_rev":"15-5569cdf859a173b7bf5f4e7ff743e4fa","name":"level-manifest","description":"describe a levelup plugin for remote access","dist-tags":{"latest":"1.2.0"},"versions":{"1.0.0":{"name":"level-manifest","description":"describe a levelup plugin for remote access","version":"1.0.0","homepage":"https://github.com/dominictarr/level-manifest","repository":{"type":"git","url":"git://github.com/dominictarr/level-manifest.git"},"dependencies":{"deep-extend":"~0.2.5"},"devDependencies":{"tape":"~0.3.3"},"scripts":{"test":"set -e; for t in test/*.js; do node $t; done"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"license":"MIT","readme":"# level-manifest\n\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"level-manifest@1.0.0","dist":{"shasum":"aea9b031193c9703f6bc844830004d5c575a8fa6","tarball":"http://registry.npmjs.org/level-manifest/-/level-manifest-1.0.0.tgz"},"_from":".","_npmVersion":"1.2.3","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"1.0.1":{"name":"level-manifest","description":"describe a levelup plugin for remote access","version":"1.0.1","homepage":"https://github.com/dominictarr/level-manifest","repository":{"type":"git","url":"git://github.com/dominictarr/level-manifest.git"},"dependencies":{"deep-extend":"~0.2.5"},"devDependencies":{"tape":"~0.3.3"},"scripts":{"test":"set -e; for t in test/*.js; do node $t; done"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"license":"MIT","readme":"# level-manifest\n\nDescribe the functions that multilevel should provide access to on the client.\n\n## Example\n\nSuppose you implement a levelup plugin that adds some cool new features to a\n[sublevel](https://github.com/dominictarr/level-sublevel)\n\nretrive a js object describing what methods a client protocol should be able\nto access.\n``` js\nvar manifest = require('level-manifest')\n\nvar m = manifest(db)\n```\n\n`manifest` build a tree of sublevels.\n\n``` js\n{\n  methods:   {},\n  sublevels: {\n    foo: {\n      methods: {},\n      sublevels: {}\n    }\n  }\n}\n```\n\nPlugins extending a sublevel should add a `methods` property that describes\nany new methods that can be used by a remote client.\n\nfor example, the default methods are specified like this:\n```\nvar methods = {\n  createReadStream  : {type: 'readable'},\n  readStream        : {type: 'readable'},\n  createValueStream : {type: 'readable'},\n  valueStream       : {type: 'readable'},\n  createKeyStream   : {type: 'readable'},\n  keyStream         : {type: 'readable'},\n  createWriteStream : {type: 'writable'},\n  writeStream       : {type: 'writable'},\n  isOpen            : {type: 'sync'},\n  isClosed          : {type: 'sync'},\n  put               : {type: 'async'},\n  get               : {type: 'async'},\n  del               : {type: 'async'},\n  batch             : {type: 'async'},\n  approximateSize   : {type: 'async'}\n}\n```\n\n`readable`, and `writable` mean readable or writable streams,\n(use `duplex` for a stream that is both readable and writable.)\n\nA client should also provide support for these types:\n``` js\nvar other = {\n  error        : {type: 'error', message: 'not-supported'},\n  createStream : {type: 'duplex'}\n}\n```\n`error` is used when a method has been disabled.\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"level-manifest@1.0.1","dist":{"shasum":"19d00f561be2357f474629c8d9fee69d11c5bc83","tarball":"http://registry.npmjs.org/level-manifest/-/level-manifest-1.0.1.tgz"},"_from":".","_npmVersion":"1.2.3","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"1.0.2":{"name":"level-manifest","description":"describe a levelup plugin for remote access","version":"1.0.2","homepage":"https://github.com/dominictarr/level-manifest","repository":{"type":"git","url":"git://github.com/dominictarr/level-manifest.git"},"dependencies":{"deep-extend":"~0.2.5"},"devDependencies":{"tape":"~0.3.3"},"scripts":{"test":"set -e; for t in test/*.js; do node $t; done"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"license":"MIT","readme":"# level-manifest\n\nDescribe the functions that multilevel should provide access to on the client.\n\n## Example\n\nSuppose you implement a levelup plugin that adds some cool new features to a\n[sublevel](https://github.com/dominictarr/level-sublevel)\n\nretrive a js object describing what methods a client protocol should be able\nto access.\n``` js\nvar manifest = require('level-manifest')\n\nvar m = manifest(db)\n```\n\n`manifest` build a tree of sublevels.\n\n``` js\n{\n  methods:   {},\n  sublevels: {\n    foo: {\n      methods: {},\n      sublevels: {}\n    }\n  }\n}\n```\n\nPlugins extending a sublevel should add a `methods` property that describes\nany new methods that can be used by a remote client.\n\nfor example, the default methods are specified like this:\n\n``` js\nvar methods = {\n  createReadStream  : {type: 'readable'},\n  readStream        : {type: 'readable'},\n  createValueStream : {type: 'readable'},\n  valueStream       : {type: 'readable'},\n  createKeyStream   : {type: 'readable'},\n  keyStream         : {type: 'readable'},\n  createWriteStream : {type: 'writable'},\n  writeStream       : {type: 'writable'},\n  isOpen            : {type: 'sync'},\n  isClosed          : {type: 'sync'},\n  put               : {type: 'async'},\n  get               : {type: 'async'},\n  del               : {type: 'async'},\n  batch             : {type: 'async'},\n  approximateSize   : {type: 'async'}\n}\n```\n\n`readable`, and `writable` mean readable or writable streams,\n(use `duplex` for a stream that is both readable and writable.)\n\nA client should also provide support for these types:\n``` js\nvar other = {\n  error        : {type: 'error', message: 'not-supported'},\n  createStream : {type: 'duplex'}\n}\n```\n`error` is used when a method has been disabled.\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"level-manifest@1.0.2","dist":{"shasum":"1b5d017349d2232bff054c26fad2b94ac7a921f4","tarball":"http://registry.npmjs.org/level-manifest/-/level-manifest-1.0.2.tgz"},"_from":".","_npmVersion":"1.2.3","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"1.0.3":{"name":"level-manifest","description":"describe a levelup plugin for remote access","version":"1.0.3","homepage":"https://github.com/dominictarr/level-manifest","repository":{"type":"git","url":"git://github.com/dominictarr/level-manifest.git"},"dependencies":{"deep-extend":"~0.2.5"},"devDependencies":{"tape":"~0.3.3"},"scripts":{"test":"set -e; for t in test/*.js; do node $t; done"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"license":"MIT","readme":"# level-manifest\n\nDescribe the functions that multilevel should provide access to on the client.\n\n## Example\n\nSuppose you implement a levelup plugin that adds some cool new features to a\n[sublevel](https://github.com/dominictarr/level-sublevel)\n\nretrive a js object describing what methods a client protocol should be able\nto access.\n``` js\nvar manifest = require('level-manifest')\n\nvar m = manifest(db)\n```\n\n`manifest` build a tree of sublevels.\n\n``` js\n{\n  methods:   {},\n  sublevels: {\n    foo: {\n      methods: {},\n      sublevels: {}\n    }\n  }\n}\n```\n\nPlugins extending a sublevel should add a `methods` property that describes\nany new methods that can be used by a remote client.\n\nfor example, the default methods are specified like this:\n\n``` js\nvar methods = {\n  createReadStream  : {type: 'readable'},\n  readStream        : {type: 'readable'},\n  createValueStream : {type: 'readable'},\n  valueStream       : {type: 'readable'},\n  createKeyStream   : {type: 'readable'},\n  keyStream         : {type: 'readable'},\n  createWriteStream : {type: 'writable'},\n  writeStream       : {type: 'writable'},\n  isOpen            : {type: 'sync'},\n  isClosed          : {type: 'sync'},\n  put               : {type: 'async'},\n  get               : {type: 'async'},\n  del               : {type: 'async'},\n  batch             : {type: 'async'},\n  approximateSize   : {type: 'async'}\n}\n```\n\n`readable`, and `writable` mean readable or writable streams,\n(use `duplex` for a stream that is both readable and writable.)\n\nA client should also provide support for these types:\n``` js\nvar other = {\n  error        : {type: 'error', message: 'not-supported'},\n  createStream : {type: 'duplex'}\n}\n```\n`error` is used when a method has been disabled.\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"level-manifest@1.0.3","dist":{"shasum":"8237d45f9f1eede31d696a49104ea8f9a978790c","tarball":"http://registry.npmjs.org/level-manifest/-/level-manifest-1.0.3.tgz"},"_from":".","_npmVersion":"1.2.3","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"1.1.0":{"name":"level-manifest","description":"describe a levelup plugin for remote access","version":"1.1.0","homepage":"https://github.com/dominictarr/level-manifest","repository":{"type":"git","url":"git://github.com/dominictarr/level-manifest.git"},"dependencies":{"deep-extend":"~0.2.5"},"devDependencies":{"tape":"~0.3.3"},"scripts":{"test":"set -e; for t in test/*.js; do node $t; done"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"license":"MIT","readme":"# level-manifest\n\nDescribe the functions that multilevel should provide access to on the client.\n\n## Example\n\nSuppose you implement a levelup plugin that adds some cool new features to a\n[sublevel](https://github.com/dominictarr/level-sublevel)\n\nretrive a js object describing what methods a client protocol should be able\nto access.\n``` js\nvar manifest = require('level-manifest')\n\nvar m = manifest(db)\n```\n\n`manifest` build a tree of sublevels.\n\n``` js\n{\n  methods:   {},\n  sublevels: {\n    foo: {\n      methods: {},\n      sublevels: {}\n    }\n  }\n}\n```\n\nPlugins extending a sublevel should add a `methods` property that describes\nany new methods that can be used by a remote client.\n\nfor example, the default methods are specified like this:\n\n``` js\nvar methods = {\n  createReadStream  : {type: 'readable'},\n  readStream        : {type: 'readable'},\n  createValueStream : {type: 'readable'},\n  valueStream       : {type: 'readable'},\n  createKeyStream   : {type: 'readable'},\n  keyStream         : {type: 'readable'},\n  createWriteStream : {type: 'writable'},\n  writeStream       : {type: 'writable'},\n  isOpen            : {type: 'sync'},\n  isClosed          : {type: 'sync'},\n  put               : {type: 'async'},\n  get               : {type: 'async'},\n  del               : {type: 'async'},\n  batch             : {type: 'async'},\n  approximateSize   : {type: 'async'}\n}\n```\n\n`readable`, and `writable` mean readable or writable streams,\n(use `duplex` for a stream that is both readable and writable.)\n\nA client should also provide support for these types:\n``` js\nvar other = {\n  error        : {type: 'error', message: 'not-supported'},\n  createStream : {type: 'duplex'}\n}\n```\n`error` is used when a method has been disabled.\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"level-manifest@1.1.0","dist":{"shasum":"962e1f0a38255326b01fbc8419688dbabd130953","tarball":"http://registry.npmjs.org/level-manifest/-/level-manifest-1.1.0.tgz"},"_from":".","_npmVersion":"1.2.3","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"1.1.1":{"name":"level-manifest","description":"describe a levelup plugin for remote access","version":"1.1.1","homepage":"https://github.com/dominictarr/level-manifest","repository":{"type":"git","url":"git://github.com/dominictarr/level-manifest.git"},"dependencies":{"deep-extend":"~0.2.5"},"devDependencies":{"tape":"~0.3.3"},"scripts":{"test":"set -e; for t in test/*.js; do node $t; done"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"license":"MIT","readme":"# level-manifest\n\nDescribe the functions that multilevel should provide access to on the client.\n\n## Example\n\nSuppose you implement a levelup plugin that adds some cool new features to a\n[sublevel](https://github.com/dominictarr/level-sublevel)\n\nretrive a js object describing what methods a client protocol should be able\nto access.\n``` js\nvar manifest = require('level-manifest')\n\nvar m = manifest(db)\n```\n\n`manifest` build a tree of sublevels.\n\n``` js\n{\n  methods:   {},\n  sublevels: {\n    foo: {\n      methods: {},\n      sublevels: {}\n    }\n  }\n}\n```\n\nPlugins extending a sublevel should add a `methods` property that describes\nany new methods that can be used by a remote client.\n\nfor example, the default methods are specified like this:\n\n``` js\nvar methods = {\n  createReadStream  : {type: 'readable'},\n  readStream        : {type: 'readable'},\n  createValueStream : {type: 'readable'},\n  valueStream       : {type: 'readable'},\n  createKeyStream   : {type: 'readable'},\n  keyStream         : {type: 'readable'},\n  createWriteStream : {type: 'writable'},\n  writeStream       : {type: 'writable'},\n  isOpen            : {type: 'sync'},\n  isClosed          : {type: 'sync'},\n  put               : {type: 'async'},\n  get               : {type: 'async'},\n  del               : {type: 'async'},\n  batch             : {type: 'async'},\n  approximateSize   : {type: 'async'}\n}\n```\n\n`readable`, and `writable` mean readable or writable streams,\n(use `duplex` for a stream that is both readable and writable.)\n\nA client should also provide support for these types:\n``` js\nvar other = {\n  error        : {type: 'error', message: 'not-supported'},\n  createStream : {type: 'duplex'}\n}\n```\n`error` is used when a method has been disabled.\n\n## License\n\nMIT\n","readmeFilename":"README.md","_id":"level-manifest@1.1.1","dist":{"shasum":"db21a694fc2540099d8c54dee1e2d07520d5d0b6","tarball":"http://registry.npmjs.org/level-manifest/-/level-manifest-1.1.1.tgz"},"_from":".","_npmVersion":"1.2.3","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}},"1.2.0":{"name":"level-manifest","description":"describe a levelup plugin for remote access","version":"1.2.0","homepage":"https://github.com/dominictarr/level-manifest","repository":{"type":"git","url":"git://github.com/dominictarr/level-manifest.git"},"dependencies":{"deep-extend":"~0.2.5"},"devDependencies":{"tape":"~2.3.0"},"scripts":{"test":"set -e; for t in test/*.js; do node $t; done"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"license":"MIT","readme":"# level-manifest\n\nDescribe the functions that multilevel should provide access to on the client.\n\n[![Build Status](https://travis-ci.org/dominictarr/level-manifest.png?branch=master)](https://travis-ci.org/dominictarr/level-manifest)\n\n## Example\n\nSuppose you implement a levelup plugin that adds some cool new features to a\n[sublevel](https://github.com/dominictarr/level-sublevel)\n\nretrive a js object describing what methods a client protocol should be able\nto access.\n``` js\nvar manifest = require('level-manifest')\n\nvar m = manifest(db)\n```\n\n`manifest` build a tree of sublevels.\n\n``` js\n{\n  methods:   {},\n  sublevels: {\n    foo: {\n      methods: {},\n      sublevels: {}\n    }\n  }\n}\n```\n\nPlugins extending a sublevel should add a `methods` property that describes\nany new methods that can be used by a remote client.\n\nfor example, the default methods are specified like this:\n\n``` js\nvar methods = {\n  createReadStream  : {type: 'readable'},\n  readStream        : {type: 'readable'},\n  createValueStream : {type: 'readable'},\n  valueStream       : {type: 'readable'},\n  createKeyStream   : {type: 'readable'},\n  keyStream         : {type: 'readable'},\n  createWriteStream : {type: 'writable'},\n  writeStream       : {type: 'writable'},\n  isOpen            : {type: 'sync'},\n  isClosed          : {type: 'sync'},\n  put               : {type: 'async'},\n  get               : {type: 'async'},\n  del               : {type: 'async'},\n  batch             : {type: 'async'},\n  approximateSize   : {type: 'async'}\n}\n```\n\n`readable`, and `writable` mean readable or writable streams,\n(use `duplex` for a stream that is both readable and writable.)\n\nA client should also provide support for these types:\n``` js\nvar other = {\n  error        : {type: 'error', message: 'not-supported'},\n  createStream : {type: 'duplex'},\n  nested       : {type: 'object', methods: {get: {type: 'async'}}}\n}\n```\n`error` is used when a method has been disabled.\n\n## License\n\nMIT\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/dominictarr/level-manifest/issues"},"_id":"level-manifest@1.2.0","dist":{"shasum":"06200d3a768bfd6b5181b27bfa9b0efcbb06fe55","tarball":"http://registry.npmjs.org/level-manifest/-/level-manifest-1.2.0.tgz"},"_from":".","_npmVersion":"1.3.11","_npmUser":{"name":"dominictarr","email":"dominic.tarr@gmail.com"},"maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"directories":{}}},"readme":"# level-manifest\n\n\n## License\n\nMIT\n","maintainers":[{"name":"dominictarr","email":"dominic.tarr@gmail.com"}],"time":{"modified":"2013-11-25T16:39:33.266Z","created":"2013-04-12T19:51:01.678Z","1.0.0":"2013-04-12T19:51:04.361Z","1.0.1":"2013-04-12T20:19:11.189Z","1.0.2":"2013-04-12T20:20:42.081Z","1.0.3":"2013-04-12T22:59:27.794Z","1.1.0":"2013-04-15T16:09:56.539Z","1.1.1":"2013-04-15T16:11:57.077Z","1.2.0":"2013-11-25T16:39:33.266Z"},"author":{"name":"Dominic Tarr","email":"dominic.tarr@gmail.com","url":"http://dominictarr.com"},"repository":{"type":"git","url":"git://github.com/dominictarr/level-manifest.git"},"_attachments":{},"_etag":"\"9T3V3J6U1Y3WY8H938QZVO6A4\""}